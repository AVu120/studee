import {
  Box,
  Button,
  Collapse,
  Divider,
  Flex,
  FormControl,
  FormErrorMessage,
  FormLabel,
  Heading,
  Input,
  Text,
  useToast,
} from "@chakra-ui/react";
import AcknowledgementModal from "components/modals";
import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { getUserData } from "pages/api/user";
import { ChangeEvent, useEffect, useState } from "react";
import authService from "services/auth";
import styles from "styles/pages/Home.module.scss";
import { getCurrentStartDate } from "utils/helpers/dateTime";
import passwordSchema from "utils/validators/password";

type TUserAction = "login" | "signup";
const Landing: NextPage = () => {
  // Temporary state until later when login and signup form are moved to modals
  // when the landing page is revamped.
  const [userAction, setUserAction] = useState<TUserAction>("login");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [touched, setTouched] = useState({ email: false, password: false });
  const [errors, setErrors] = useState<{
    email: string;
    password: { arguments?: number; message: string; validation?: string }[];
  }>({ email: "", password: [] });
  const [loading, setLoading] = useState(false);
  const [notification, setNotification] = useState<{
    title: string;
    message: string;
  }>({ title: "", message: "" });
  const router = useRouter();
  const toast = useToast();

  // Validate email
  useEffect(() => {
    setErrors((currentErrors) => ({
      ...currentErrors,
      email: email === "" ? "Email is required" : "",
    }));
  }, [email]);

  // Validate password
  useEffect(() => {
    setErrors((currentErrors) => ({
      ...currentErrors,
      password: passwordSchema.validate(password, { details: true }),
    }));
  }, [password]);

  const changeEmail = (e: ChangeEvent<HTMLInputElement>) => {
    setEmail(e.target.value);
    if (!touched.email)
      setTouched((currentTouched) => ({ ...currentTouched, email: true }));
  };
  const blurEmailField = () => {
    if (!touched.email) {
      setTouched((currentTouched) => ({ ...currentTouched, email: true }));
    }
  };
  const changePassword = (e: ChangeEvent<HTMLInputElement>) => {
    setPassword(e.target.value);
    if (!touched.password) {
      setTouched((currentTouched) => ({ ...currentTouched, password: true }));
    }
  };
  const blurPasswordField = () => {
    if (!touched.password) {
      setTouched((currentTouched) => ({ ...currentTouched, password: true }));
    }
  };

  const changeUserAction = (newAction: TUserAction) => {
    setUserAction(newAction);
    setEmail("");
    setPassword("");
  };

  const callToActionButtonMsg = userAction === "login" ? "Log In" : "Sign Up";
  return (
    <div className={styles.container}>
      <Head>
        <title>Studee - log in or sign up</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Heading variant="h1" size="h1" as="h1">
          Welcome to Studee
        </Heading>

        <form
          className={styles.form}
          onSubmit={(e) => {
            e.preventDefault();
            // eslint-disable-next-line @typescript-eslint/no-unused-expressions
            userAction === "login"
              ? authService.login(
                  email,
                  password,
                  setLoading,
                  setErrors,
                  setNotification,
                  router,
                  toast
                )
              : authService.signUp(
                  email,
                  password,
                  setLoading,
                  setErrors,
                  setNotification
                );
          }}
        >
          <FormControl isInvalid={touched.email && !!errors.email}>
            <FormLabel htmlFor="email" mb="-0.1">
              Email address
            </FormLabel>
            <Input
              id="email"
              type="email"
              onChange={changeEmail}
              onBlur={blurEmailField}
              value={email}
            />

            <FormErrorMessage>{errors.email}</FormErrorMessage>
          </FormControl>
          <FormControl
            isInvalid={touched.password && !!errors.password.length}
            mt="2"
          >
            <FormLabel htmlFor="password" mb="-0.1">
              Password
            </FormLabel>
            <Input
              id="password"
              type="password"
              onChange={changePassword}
              // pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}"
              title="Must contain at least one  number and one uppercase and lowercase letter, and at least 8 or more characters"
              onBlur={blurPasswordField}
              value={password}
            />
            {errors.password.map(({ message }) => (
              <FormErrorMessage key={message}>{message}</FormErrorMessage>
            ))}
          </FormControl>

          <Button
            mt={4}
            type="submit"
            isDisabled={!!errors.email || !!errors.password.length}
            variant="primary"
          >
            {/* // eslint-disable-next-line no-nested-ternary */}
            {loading ? "Loading..." : callToActionButtonMsg}
          </Button>
          {userAction === "login" ? (
            <Text
              textStyle="a"
              as="a"
              mt="2"
              onClick={() => alert("Forgot password flow initiated.")}
            >
              Forgot your password?
            </Text>
          ) : (
            <Flex>
              <Text mt="2" mr="1">
                Already have an account?
              </Text>
              <Text as="a" mt="2" onClick={() => changeUserAction("login")}>
                Log in
              </Text>
            </Flex>
          )}

          <Collapse in={userAction === "login"} animateOpacity>
            <Divider />
            <Button
              mt={1}
              type="button"
              variant="secondary"
              onClick={() => changeUserAction("signup")}
              w="100%"
            >
              Create New Account
            </Button>
          </Collapse>
        </form>
        {/* Account successfully created modal */}
        <AcknowledgementModal
          isOpen={!!notification.message}
          onClose={() => {
            setUserAction("login");
            setNotification({ title: "", message: "" });
          }}
          message={notification.message}
          title={notification.title}
        />
      </main>
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async ({ req }) => {
  const { cookies } = req;

  let userData;

  if (cookies.session) {
    userData = await getUserData(cookies.session);
  }

  if (userData) {
    return {
      redirect: {
        destination: `/me/week/${getCurrentStartDate()}`,
        permanent: false,
      },
    };
  }
  return { props: {} };
};

export default Landing;
