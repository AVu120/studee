import {
  Button,
  Collapse,
  Divider,
  Flex,
  FormControl,
  FormErrorMessage,
  FormLabel,
  Heading,
  Input,
  Text,
  useToast,
} from "@chakra-ui/react";
import { Acknowledgement } from "components/common/modals/Acknowledgement";
import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { getUserData } from "pages/api/user";
import { ChangeEvent, useEffect, useState } from "react";
import { logIn, resetPassword, signUp } from "services/auth";
import styles from "styles/pages/Home.module.scss";
import { getCurrentStartDate } from "utils/helpers/dateTime";
import passwordSchema from "utils/validators/password";

type TUserAction = "logIn" | "signUp" | "resetPassword";
const Landing: NextPage = () => {
  // Temporary state until later when logIn and signUp form are moved to modals
  // when the landing page is revamped.
  const [userAction, setUserAction] = useState<TUserAction>("logIn");
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [touched, setTouched] = useState({ email: false, password: false });
  const [errors, setErrors] = useState<{
    email: string;
    password: { arguments?: number; message: string; validation?: string }[];
  }>({ email: "", password: [] });
  const [isLoading, setIsLoading] = useState(false);
  const [notification, setNotification] = useState<{
    title: string;
    message: string;
  }>({ title: "", message: "" });
  const router = useRouter();
  const toast = useToast();

  // Validate email
  useEffect(() => {
    setErrors((currentErrors) => ({
      ...currentErrors,
      email: email === "" ? "Email is required" : "",
    }));
  }, [email]);

  // Validate password
  useEffect(() => {
    setErrors((currentErrors) => ({
      ...currentErrors,
      password:
        userAction === "resetPassword"
          ? []
          : passwordSchema.validate(password, { details: true }),
    }));
  }, [password, userAction]);

  const changeEmail = (e: ChangeEvent<HTMLInputElement>) => {
    setEmail(e.target.value);
    if (!touched.email)
      setTouched((currentTouched) => ({ ...currentTouched, email: true }));
  };
  const blurEmailField = () => {
    if (!touched.email) {
      setTouched((currentTouched) => ({ ...currentTouched, email: true }));
    }
  };
  const changePassword = (e: ChangeEvent<HTMLInputElement>) => {
    setPassword(e.target.value);
    if (!touched.password) {
      setTouched((currentTouched) => ({ ...currentTouched, password: true }));
    }
  };
  const blurPasswordField = () => {
    if (!touched.password) {
      setTouched((currentTouched) => ({ ...currentTouched, password: true }));
    }
  };

  const changeUserAction = (newAction: TUserAction) => {
    setUserAction(newAction);
    setEmail("");
    setPassword("");
  };

  const callToActionLabels = {
    logIn: "Log In",
    signUp: "Sign Up",
    resetPassword: "Reset Password",
  };

  const callToActionFunctions = {
    logIn: () =>
      logIn(
        email,
        password,
        setIsLoading,
        setErrors,
        setNotification,
        router,
        toast
      ),
    signUp: () =>
      signUp(email, password, setIsLoading, setErrors, setNotification),
    resetPassword: () =>
      resetPassword(email, setIsLoading, setErrors, setNotification),
  };
  const callToActionLabel = callToActionLabels[userAction];
  return (
    <div className={styles.container}>
      <Head>
        <title>Studee - log in or sign up</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <Heading variant="h1" size="h1" as="h1">
          Welcome to Studee
        </Heading>
        <Heading variant="h2" size="h2" as="h2" mb="1rem">
          All your study planning in one place.
        </Heading>
        <form
          className={styles.form}
          onSubmit={(e) => {
            e.preventDefault();
            // eslint-disable-next-line @typescript-eslint/no-unused-expressions
            callToActionFunctions[userAction]();
          }}
        >
          <FormControl isInvalid={touched.email && !!errors.email}>
            <FormLabel htmlFor="email" mb="-0.1">
              Email address
            </FormLabel>
            <Input
              id="email"
              type="email"
              onChange={changeEmail}
              onBlur={blurEmailField}
              value={email}
            />

            <FormErrorMessage>{errors.email}</FormErrorMessage>
          </FormControl>
          {userAction !== "resetPassword" && (
            <FormControl
              isInvalid={touched.password && !!errors.password.length}
              mt="2"
            >
              <FormLabel htmlFor="password" mb="-0.1">
                Password
              </FormLabel>
              <Input
                id="password"
                type="password"
                onChange={changePassword}
                // pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,}"
                title="Must contain at least one  number and one uppercase and lowercase letter, and at least 8 or more characters"
                onBlur={blurPasswordField}
                value={password}
              />
              {errors.password.map(({ message }) => (
                <FormErrorMessage key={message}>{message}</FormErrorMessage>
              ))}
            </FormControl>
          )}

          <Button
            mt={4}
            type="submit"
            isDisabled={!!errors.email || !!errors.password.length || isLoading}
            variant="primary"
          >
            {isLoading ? "Loading..." : callToActionLabel}
          </Button>
          {userAction === "logIn" && (
            <Text
              textStyle="a"
              as="a"
              mt="2"
              onClick={() => setUserAction("resetPassword")}
              pointerEvents={isLoading ? "none" : "inherit"}
              color={isLoading ? "grey" : "default"}
            >
              Forgot your password?
            </Text>
          )}
          {userAction === "signUp" && (
            <Flex>
              <Text mt="2" mr="1">
                Already have an account?
              </Text>
              <Text
                as="a"
                mt="2"
                onClick={() => changeUserAction("logIn")}
                pointerEvents={isLoading ? "none" : "inherit"}
                color={isLoading ? "grey" : "default"}
              >
                Log in
              </Text>
            </Flex>
          )}
          {userAction === "resetPassword" && (
            <Text
              textStyle="a"
              as="a"
              mt="2"
              onClick={() => setUserAction("logIn")}
              pointerEvents={isLoading ? "none" : "inherit"}
              color={isLoading ? "grey" : "default"}
            >
              Back
            </Text>
          )}

          <Collapse in={userAction === "logIn"} animateOpacity>
            <Divider />
            <Button
              mt={1}
              type="button"
              variant="secondary"
              onClick={() => changeUserAction("signUp")}
              w="100%"
              isDisabled={isLoading}
            >
              Create New Account
            </Button>
          </Collapse>
        </form>
        <Acknowledgement
          isOpen={!!notification.message}
          onClose={() => {
            setNotification({ title: "", message: "" });
          }}
          message={notification.message}
          title={notification.title}
        />
      </main>
    </div>
  );
};

export const getServerSideProps: GetServerSideProps = async ({ req }) => {
  const { cookies } = req;

  let userData;

  if (cookies.session) {
    userData = await getUserData(cookies.session);
  }

  if (userData) {
    return {
      redirect: {
        destination: `/me/week/${getCurrentStartDate()}`,
        permanent: false,
      },
    };
  }
  return { props: {} };
};

export default Landing;
