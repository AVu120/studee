import { ChevronLeftIcon, ChevronRightIcon } from "@chakra-ui/icons";
import { HStack, IconButton, Text, useToast } from "@chakra-ui/react";
import { Header } from "components/common/Header";
import { Acknowledgement } from "components/common/modals/Acknowledgement";
import { ConfirmPrompt } from "components/common/modals/ConfirmPrompt";
import { WarningPrompt } from "components/common/modals/WarningPrompt";
import { Planner } from "components/pages/me/week/Planner";
import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useRef, useState } from "react";
import { logOut } from "services/auth";
import { getWeeklyPlanOnClient, updateWeeklyPlan } from "services/weeklyPlans";
import styles from "styles/pages/me/schedule/week/Index.module.scss";
import { createEmptyWeeklyPlan } from "utils/constants/weeklyPlans";
import {
  formatDateForClient,
  getCurrentStartDate,
  getDateInUrlPath,
  getNextStartDate,
  getPreviousStartDate,
  isStartDate,
} from "utils/helpers/dateTime";
import { IWeeklyPlan } from "utils/types/weeklyPlans";

import { getUserData } from "../../../api/user";
import { getWeeklyPlanOnServer } from "../../../api/weeklyPlans";

interface Props {
  weeklyPlan: IWeeklyPlan | null;
}

type TDiscardUnsavedChangesActions = "showNextWeek" | "showLastWeek" | "logOut";

const Week: NextPage<Props> = ({ weeklyPlan }) => {
  const router = useRouter();

  /**
   * Server start date is in format "YYYY/MM/DD".
   */
  let serverStartDate: string;
  if (Array.isArray(router?.query?.params)) {
    serverStartDate = getDateInUrlPath(router?.query?.params);
  } else {
    serverStartDate = getCurrentStartDate();
  }
  const nextStartDate = getNextStartDate(serverStartDate);
  const previousStartDate = getPreviousStartDate(serverStartDate);
  /** Last weeklyPlan record that user saved, used to determine if there's any local unsaved changes. */
  const savedWeeklyPlanRef = useRef(
    weeklyPlan || createEmptyWeeklyPlan(serverStartDate)
  );
  const [weeklyPlanState, setWeeklyPlanState] = useState(
    weeklyPlan || createEmptyWeeklyPlan(serverStartDate)
  );
  const [hasUnsavedChanges, setHasUnsavedChanged] = useState(false);

  const [isLoggingOut, setIsLoggingOut] = useState(false);
  const [isLoadingNextWeekData, setIsLoadingNextWeekData] = useState(false);
  const [isLoadingPriorWeekData, setIsLoadingPriorWeekData] = useState(false);
  const [isAttemptingToLogOut, setIsAttemptingToLogOut] = useState(false);
  const [discardUnsavedChangesAction, setDiscardUnsavedChangesAction] =
    useState<TDiscardUnsavedChangesActions | "">("");

  const [isSaving, setIsSaving] = useState(false);
  const toast = useToast();
  const [notification, setNotification] = useState<{
    title: string;
    message: string;
  }>({ title: "", message: "" });

  useEffect(() => {
    if (
      !hasUnsavedChanges &&
      JSON.stringify(weeklyPlanState) !==
        JSON.stringify(savedWeeklyPlanRef.current)
    ) {
      setHasUnsavedChanged(true);
    }
  }, [weeklyPlanState]);

  const clientStartDate = formatDateForClient(serverStartDate);

  const onLogOut = () =>
    logOut(setIsLoggingOut, router, setNotification, toast);
  const onSave = () =>
    updateWeeklyPlan(
      weeklyPlanState,
      setIsSaving,
      toast,
      setHasUnsavedChanged,
      savedWeeklyPlanRef,
      setNotification
    );

  const onShowNextWeek = () => {
    getWeeklyPlanOnClient(
      nextStartDate,
      setWeeklyPlanState,
      setIsLoadingNextWeekData,
      savedWeeklyPlanRef,
      router,
      setHasUnsavedChanged,
      setNotification
    );
  };

  const onShowPreviousWeek = () => {
    getWeeklyPlanOnClient(
      previousStartDate,
      setWeeklyPlanState,
      setIsLoadingPriorWeekData,
      savedWeeklyPlanRef,
      router,
      setHasUnsavedChanged,
      setNotification
    );
  };

  const discardUnsavedChangesActions = {
    showNextWeek: onShowNextWeek,
    showLastWeek: onShowPreviousWeek,
    logOut: onLogOut,
  };

  return (
    <div className={styles.page}>
      <Head>
        <title>Schedule</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header
        onSave={onSave}
        hasUnsavedChanges={hasUnsavedChanges}
        isSaving={isSaving}
        CentreComponent={
          <HStack>
            <IconButton
              variant="outline"
              aria-label="Show last week"
              isRound
              borderColor="transparent"
              position="relative"
              right={{
                base: "-4",
                md: "-3",
                lg: "-2",
                xl: "-1",
              }}
              _hover={{ bg: "transparent" }}
              icon={
                <ChevronLeftIcon
                  fontSize={{
                    base: "2rem",
                    md: "2.5rem",
                    lg: "3rem",
                  }}
                />
              }
              onClick={
                hasUnsavedChanges
                  ? () => setDiscardUnsavedChangesAction("showLastWeek")
                  : onShowPreviousWeek
              }
              isLoading={isLoadingPriorWeekData}
            />
            <Text
              as="h1"
              textAlign="center"
              margin="0px"
            >{`Week of ${clientStartDate}`}</Text>
            <IconButton
              variant="outline"
              aria-label="Show next week"
              borderColor="transparent"
              isRound
              position="relative"
              left={{
                base: "-4",
                md: "-3",
                lg: "-2",
                xl: "-1",
              }}
              _hover={{ bg: "transparent" }}
              icon={
                <ChevronRightIcon
                  fontSize={{
                    base: "2rem",
                    md: "2.5rem",
                    lg: "3rem",
                  }}
                />
              }
              onClick={
                hasUnsavedChanges
                  ? () => setDiscardUnsavedChangesAction("showNextWeek")
                  : onShowNextWeek
              }
              isLoading={isLoadingNextWeekData}
            />
          </HStack>
        }
        isLoggingOut={isLoggingOut}
        onLogOut={
          hasUnsavedChanges
            ? () => setDiscardUnsavedChangesAction("logOut")
            : () => setIsAttemptingToLogOut(true)
        }
      />

      <main className={styles.main}>
        <Planner
          weeklyPlan={weeklyPlanState}
          setWeeklyPlanState={setWeeklyPlanState}
        />
        <WarningPrompt
          isOpen={!!discardUnsavedChangesAction}
          onClose={() => setDiscardUnsavedChangesAction("")}
          onConfirm={() => {
            discardUnsavedChangesActions[
              discardUnsavedChangesAction as TDiscardUnsavedChangesActions
            ]();
            setDiscardUnsavedChangesAction("");
          }}
          title="Discard unsaved changes?"
          prompt="Your changes will be lost. Do you want to proceed anyway?"
        />
        <Acknowledgement
          isOpen={!!notification.message}
          onClose={() => {
            setNotification({ title: "", message: "" });
          }}
          message={notification.message}
          title={notification.title}
        />
        <ConfirmPrompt
          isOpen={isAttemptingToLogOut}
          onClose={() => setIsAttemptingToLogOut(false)}
          onConfirm={() => {
            setIsAttemptingToLogOut(false);
            onLogOut();
          }}
          title="Logging Out"
          prompt="Are you sure you want to log out?"
          action="Log Out"
        />
      </main>
    </div>
  );
};

export default Week;

export const getServerSideProps: GetServerSideProps = async ({
  req,
  query,
}) => {
  const { cookies } = req;

  if (cookies.session) {
    const userData = await getUserData(cookies.session);

    if (userData) {
      const { user_id: userId } = userData;

      const { params } = query as { params: string[] };

      const startDate = `${params[0]}/${params[1]}/${params[2]}`;

      if (!isStartDate(startDate)) {
        return {
          redirect: {
            destination: `/me/schedule/week/not-found?startDate=${startDate}`,
            permanent: false,
          },
        };
      }
      const weeklyPlan = await getWeeklyPlanOnServer({ userId, startDate });

      return {
        props: { weeklyPlan },
      };
    }
  }

  return {
    redirect: {
      destination: "/",
      permanent: false,
    },
  };
};
