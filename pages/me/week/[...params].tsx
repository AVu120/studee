import { ChevronLeftIcon, ChevronRightIcon } from "@chakra-ui/icons";
import { Button, HStack, IconButton, Text, useToast } from "@chakra-ui/react";
import { Planner } from "components/Planner";
import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useRef, useState } from "react";
import { logOut } from "services/auth";
import { updateWeeklyPlan } from "services/weeklyPlans";
import styles from "styles/pages/me/week.module.scss";
import colors from "styles/theme/colors";
import { getEmptyWeeklyPlan } from "utils/constants/weeklyPlan";
import { getCurrentStartDate, getDateInUrlPath } from "utils/helpers/dateTime";
import { IWeeklyPlan } from "utils/types/weeklyPlan";

import { getUserData } from "../../api/user";
import { getWeeklyPlan } from "../../api/weeklyPlans";

interface Props {
  email: string;
  weeklyPlan: IWeeklyPlan | null;
}
const Me: NextPage<Props> = ({ email, weeklyPlan }) => {
  const router = useRouter();

  /** Start date that is set when the page is loaded but weeklyPlan can't be found in the db.  */
  let emptyStartDate: string;
  if (Array.isArray(router?.query?.params)) {
    emptyStartDate = getDateInUrlPath(router?.query?.params);
  } else {
    emptyStartDate = getCurrentStartDate();
  }

  const savedWeeklyPlanRef = useRef(
    weeklyPlan || getEmptyWeeklyPlan(emptyStartDate)
  );
  const [weeklyPlanState, setWeeklyPlanState] = useState(
    weeklyPlan || getEmptyWeeklyPlan(emptyStartDate)
  );
  const [hasUnsavedChanges, setHasUnsavedChanged] = useState(false);

  useEffect(() => {
    if (
      !hasUnsavedChanges &&
      JSON.stringify(weeklyPlanState) !==
        JSON.stringify(savedWeeklyPlanRef.current)
    ) {
      setHasUnsavedChanged(true);
    }
  }, [weeklyPlanState]);

  const [startDateYear, startDateMonth, startDateDay] =
    weeklyPlanState.startDate.split("/").map((numString) => Number(numString));
  const startDateString = `${startDateDay}/${startDateMonth}/${startDateYear}`;
  // const endDateObject = new Date(
  //   startDateYear,
  //   startDateMonth - 1,
  //   startDateDay
  // );
  // endDateObject.setDate(endDateObject.getDate() + 6);
  // const endDateString = `${endDateObject.getDate()}/${
  //   endDateObject.getMonth() + 1
  // }/${endDateObject.getFullYear()}`;

  // Track status of logout request.
  const [isLoading, setIsLoading] = useState(false);

  const [isSaving, setIsSaving] = useState(false);
  const [error, setError] = useState("");
  const toast = useToast();

  const onLogOut = () => logOut(setIsLoading, setError, router, toast);
  const onSave = () =>
    updateWeeklyPlan(
      weeklyPlanState,
      setIsSaving,
      setError,
      toast,
      setHasUnsavedChanged,
      savedWeeklyPlanRef
    );

  return (
    <div className={styles.page}>
      <Head>
        <title>Studee</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <header
        className={styles.header}
        // @ts-ignore
        style={{ "--bgColor": colors.secondary }}
      >
        {" "}
        <Button
          type="submit"
          variant="primary"
          onClick={onSave}
          disabled={!hasUnsavedChanges || isSaving}
        >
          {isSaving ? "Saving..." : "Save"}
        </Button>
        <HStack>
          <IconButton
            variant="unstyled"
            aria-label="Show last week"
            isRound
            position="relative"
            right="-4"
            icon={<ChevronLeftIcon fontSize="2rem" />}
          />
          <Text
            as="h1"
            textAlign="center"
            margin="0px"
          >{`Week of ${startDateString}`}</Text>
          <IconButton
            variant="outlined"
            aria-label="Show next week"
            isRound
            position="relative"
            left="-4"
            icon={<ChevronRightIcon fontSize="2rem" />}
          />
        </HStack>
        <Button
          type="submit"
          variant="secondary"
          onClick={onLogOut}
          disabled={isLoading}
        >
          {isLoading ? "Loading..." : "Log Out "}
        </Button>
      </header>

      <main className={styles.main}>
        <Planner
          weeklyPlan={weeklyPlanState}
          setWeeklyPlanState={setWeeklyPlanState}
        />
      </main>

      <footer
        className={styles.footer}
        // @ts-ignore
        style={{ "--bgColor": colors.secondary }}
      >
        <span>Studee App</span>
        <span>
          Created by{" "}
          <a
            href="https://www.linkedin.com/in/anthony-hien-vu/"
            target="_blank"
            rel="noreferrer"
          >
            Anthony Hien Vu
          </a>
        </span>
      </footer>
    </div>
  );
};

export default Me;

export const getServerSideProps: GetServerSideProps = async ({
  req,
  query,
}) => {
  const { cookies } = req;

  if (cookies.session) {
    const userData = await getUserData(cookies.session);

    if (userData) {
      const { email, user_id: userId } = userData;

      const { params } = query as { params: string[] };
      const startDate = `${params[0]}/${params[1]}/${params[2]}`;

      const weeklyPlan = await getWeeklyPlan({ userId, startDate });

      return {
        props: { email, weeklyPlan },
      };
    }
  }

  return {
    redirect: {
      destination: "/",
      permanent: false,
    },
  };
};
