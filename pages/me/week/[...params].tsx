import { Button, useToast } from "@chakra-ui/react";
import { Planner } from "components/Planner";
import { DailyPlan } from "components/Planner/DailyPlan";
import type { GetServerSideProps, NextPage, NextPageContext } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import auth from "services/auth";
import styles from "styles/pages/me.module.scss";
import colors from "styles/theme/colors";
import { daysOfWeek } from "utils/constants/dateTimes";

import { getUserData } from "../../api/user";
import { getWeeklyPlan } from "../../api/weeklyPlans";

interface Props {
  email: string;
  USER_ID: string;
}
const Me: NextPage<Props> = ({ email, userId, weeklyPlan }) => {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState("");
  const router = useRouter();
  const toast = useToast();

  console.log({ "router.query": router.query });

  return (
    <div className={styles.page}>
      <Head>
        <title>Studee</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <header
        className={styles.header}
        // @ts-ignore
        style={{ "--bgColor": colors.secondary }}
      >
        <h1>Plan for placeholder start of week</h1>
        <Button
          type="submit"
          variant="primary"
          onClick={() => auth.logOut(setIsLoading, setError, router, toast)}
        >
          {/* // eslint-disable-next-line no-nested-ternary */}
          {isLoading ? "Loading..." : "Log Out "}
        </Button>
      </header>

      <main className={styles.main}>
        <Planner startDate />
      </main>
    </div>
  );
};

export default Me;

export const getServerSideProps: GetServerSideProps = async ({
  req,
  query,
  res,
}) => {
  const { cookies } = req;

  console.log({ query });
  if (cookies.session) {
    const userData = await getUserData(cookies.session);

    if (userData) {
      const { email, user_id: userId } = userData;

      const { params } = query as { params: string[] };
      const startDate = `${params[0]}/${params[1]}/${params[2]}`;

      const weeklyPlan = await getWeeklyPlan({ userId, startDate });

      return {
        props: { email, userId, weeklyPlan },
      };
    }
  }

  return {
    redirect: {
      destination: "/",
      permanent: false,
    },
  };
};
